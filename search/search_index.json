{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Electroid Marines Playbook","text":"<p>Note</p> <p>Our playbook site is constantly being updated\ud83c\udfd7\ufe0f. Bookmark this site\ud83d\udd16, and come back often to check out the latest contents!</p> <p></p> <pre><code>graph LR\n  A(Start) --&gt; B[Plan&lt;br&gt;#40;Define#41;];\n  B --&gt; C[Do&lt;br&gt;#40;Test#41;];\n  C --&gt; D[Check&lt;br&gt;#40;Analyze#41;];\n  D --&gt; E(Success!);\n  D --&gt; F[Act&lt;br&gt;#40;Adjust#41;];\n  F --&gt; B;</code></pre>"},{"location":"schedule/","title":"Schedule","text":"Week # Date Meeting objective Playbook contents Week 1 8/16 Pybricks/Python refresher Week 2 8/23 Introduction to GitHub Week 3 8/30 Sensor integration Week 4 9/06 Feedback use strategies Week 5 9/13 Bonus\ud83c\udf81: Image generation Week 6 9/20 Week 7 9/27 Visual Studio Code Week 8 10/04 Week 9 10/11 Bonus\ud83c\udf81: Website creation Week 10 10/18 Week 11 10/25 Week 12 11/01 Week 13 11/08"},{"location":"week_01/","title":"Week 1 - Refreshers","text":"<p>Welcome back, explorers!  Let's dive into some Python magic and see what awesome things we remember from last year. Ready for a fun challenge?</p>"},{"location":"week_01/#python","title":"Python","text":""},{"location":"week_01/#online-playground","title":"Online playground","text":"<ul> <li>Online Python</li> <li>trinket</li> <li>W3 schools</li> </ul> Share your code <p>Some of those online playgrounds give a unique URL for your code, so you can share your code with others.</p>"},{"location":"week_01/#basics","title":"Basics","text":"<p>Following contents are from Coach Kiran's material from the last academic year.</p>"},{"location":"week_01/#python-vs-scratch","title":"Python vs. Scratch","text":"<p>\u270f\ufe0f How are they different?</p>"},{"location":"week_01/#hello-world","title":"\"Hello World\"","text":"<p>Type the following script in one of the online playground and Run.  </p> <pre><code>print(\"Hello, World!\")\n</code></pre> <p>\u270f\ufe0f Replace \"Hello World\" with another sentence, and run again.</p>"},{"location":"week_01/#syntax","title":"Syntax","text":"<p>Conditionals, Loops, Methods declarations end with a <code>:</code>.</p> <pre><code>if (a &lt; 4):\n</code></pre> <p>Use spaces to indicate a block of code. 4 spaces is the accepted convention.</p> <pre><code>if 2 &lt; 10:\n    print(\"2 is less than 10\")\n</code></pre>"},{"location":"week_01/#functions","title":"Functions","text":"<p>A function is a block of code which only runs when it is called.</p> <p>\u270f\ufe0f Try it:</p> <pre><code>def function_1():\n    print(\"hello from function 1\")\n\ndef function_2():\n    print(\"hello from function 2\")\n\nfunction_1()\n</code></pre>"},{"location":"week_01/#variables","title":"Variables","text":"<p>Variables are containers with names for storing values</p> <p>Example:</p> <pre><code>robot_name = \"electrobot\"\nrobot_speed = 100\n</code></pre> <p>\u270f\ufe0f Try it:</p> <pre><code>my_fancy_text = \"not all who wander are lost\"\nprint(my_fancy_text)\n</code></pre>"},{"location":"week_01/#constants","title":"Constants","text":"<p>Constants are a type of variable whose values don\u2019t change.</p> <p>Example:</p> <pre><code>ROBOT_WHEEL_DIAMETER_MM = 50\nROBOT_AXLE_LENGTH_MM = 100\n</code></pre> <p>\u270f\ufe0f Try it:</p> <pre><code>MY_CONSTANT = 42\nprint(MY_CONSTANT)\n</code></pre>"},{"location":"week_01/#booleans","title":"Booleans","text":"<p>Booleans represent one of TWO values: <code>True</code> or <code>False</code></p> <p>\u270f\ufe0f Try it:</p> <p>See what is printed when you try these statements</p> <pre><code>print(10 &gt; 9)\nprint(10 == 9)\nprint(10 != 9)\nprint(10 &lt; 9)\n</code></pre>"},{"location":"week_01/#loops","title":"Loops","text":"<p>Loops allow us to execute a command many times. While loop to begin with.</p> <p>\u270f\ufe0f Try it:</p> <pre><code>counter = 0\nwhile (counter &lt; 10):\n    print(\u201cvalue of\u201d, counter)\n    counter += 1\n\nprint(counter)\n</code></pre>"},{"location":"week_01/#conditionals","title":"Conditionals","text":"<p>Conditionals allow us to execute code based on certain conditions.</p> <p>\u270f\ufe0f Try it:</p> <pre><code>x = 10\nif x &lt; 10:\n    print(\"x is less than 10\")\nelif x &gt; 10:\n    print(\"x is greater than 10\")\nelse:\n    print(\"x is equal to 10\")\n</code></pre>"},{"location":"week_01/#resources","title":"Resources","text":"<ul> <li>Python Tutorial on W3 schools</li> </ul>"},{"location":"week_01/#pybrick","title":"Pybrick","text":""},{"location":"week_01/#getting-started","title":"Getting Started","text":"<p>Go to <code>https://beta.pybricks.com</code>.</p> <p>You should see a page like this in your browser window. </p> Install locally on your computer <p>You can \"install\" Pybricks Code on your computer so you can start using it easily and even without the Internet.</p> <p></p>"},{"location":"week_01/#installupdate-pybricks-firmware","title":"Install/Update Pybricks firmware","text":"Prerequisite: USB driver install <p>If you are Windows user, and if this is your first time installing or updating the firmware on yoru Windows PC, first check if you have the right USB driver for the Hub.</p> <p>Open \"Device Manager\" and check if how \"LEGO Technic Large Hub in DFU Mode\" appears.</p> <p>If it appears with yellow triangle sign (\u26a0\ufe0f), like the following, you need to install the USB driver first.</p> <p></p> <p>To find the instruction for installing the USB driver, start the \"Install Pybricks Firmware\" process by the following steps;</p> <ol> <li>Click (gear icon) on the left side bar, </li> <li>Under \"Firmware\" section, click \"Install Pybricks Firmware\"</li> <li>Skip through the Step  to  by hitting \"Next\" button</li> <li> <p>On \"Step \", at the very bottom, click on \"Click for instructions\".</p> <p></p> </li> <li> <p>\"Windows DFU USB driver installation instuctions\" appears in the screen. Follow this guide and perfom the actions on your Device Manager. </p> <p></p> </li> </ol>"},{"location":"week_01/#install-update-steps","title":"Install / Update steps","text":"First time use  Fresh installUpdate <p>If this is your first time using your SPIKE Prime Hub (or MINDSTORMS Robot Inventor Hub) with Pybricks,  start the \"Install Pybricks Firmware\" process by the following steps;</p> <ul> <li>Click (gear icon) on the left side bar, </li> <li>Under \"Firmware\" section, click \"Install Pybricks Firmware\"</li> </ul> <p></p> <p>Follow the on-screen guide (Step  to ) to install the new Pybrick firmware on your Hub.</p> <p>If you had installed the custom Pybrick firmware on your Hub a while ago, you may get this message when connect to your Hub.</p> <p></p> <p>Hit the \" Update Pybricks firmware\" button to start the \"Install Pybricks Firmware\" process.</p>"},{"location":"week_01/#pybricks-ui","title":"Pybricks UI","text":""},{"location":"week_01/#how-to-connect","title":"How to connect","text":"<ol> <li>Turn on the SPIKE Prime Hub (or MINDSTORMS Robot Inventor Hub) by pressing the big circular button.</li> <li> <p>On Pybricks Code, click the Bluetooth button ()</p> <p></p> </li> <li> <p>Your Hub should appear in the list. Select it and hit \"Pair\" button.</p> <p></p> </li> <li> <p>Make sure your Hub is connect by checking the Bluetooth button (it should now look like )</p> <p></p> </li> </ol>"},{"location":"week_01/#how-to-code-and-run-on-hub","title":"How to code (and run on Hub)","text":"<ol> <li> <p>Click on  (File) button on the left side bar</p> <p></p> </li> <li> <p>On \"Create a new file\" dialog, </p> <ul> <li>For \"Program type\", select \"Python\" (left)  </li> <li>For \"File name\", type the name of your program as you like</li> <li>For \"Template\", make sure \"Use a template\" is on, and select your hub</li> <li>Hit \"Create\" button</li> </ul> </li> <li> <p>Add the following line at the end of the script in code area.</p> <pre><code>print(\"Hello, World!\")\n</code></pre> </li> <li> <p>Hit \"(Run)\" button (or press F5 key) to run your code on your Hub</p> <p></p> </li> <li> <p>You should see \"Hello, World\" in the Output window.</p> <p></p> </li> </ol>"},{"location":"week_01/#pybrick-classes","title":"Pybrick Classes","text":""},{"location":"week_01/#drivebase","title":"<code>drivebase</code>","text":"<p>Used to move the drivebase in a given direction</p> <pre><code>motor_a = Motor(Port.A)\nmotor_b = Motor(Port.B,  Direction.COUNTERCLOCKWISE)\n\ndrive = DriveBase(left_motor=motor_a, \n                  right_motor=motor_b, \n                  wheel_diameter=53,\n                  axle_track=129)\n\ndrive.straight(distance=100)\n</code></pre>"},{"location":"week_01/#hub-menu-implementation","title":"Hub menu implementation","text":"<p>You can select your program with the buttons on the Hub by using <code>hub_menu</code> module.</p> <ol> <li> <p>Create the following 3 files in your file manager and copy each code contents.</p> <code>main.py</code><code>mission_1.py</code><code>mission_2.py</code><code>constants.py</code> <pre><code>from pybricks.tools import hub_menu\n\nselected = hub_menu(\"A\", \"B\", \"C\")\n\nif selected == \"A\":\n    import mission_1\nelif selected == \"B\":\n    import mission_2\nelif selected == \"C\":\n    import mission_3\n</code></pre> <pre><code>from pybricks.hubs import InventorHub\nfrom pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor\nfrom pybricks.parameters import Button, Color, Direction, Port, Side, Stop\nfrom pybricks.robotics import DriveBase\nfrom pybricks.tools import wait, StopWatch\nimport constants\n\nwheel_e = Motor(Port.E, reset_angle=True)\nwheel_a = Motor(Port.A, Direction.COUNTERCLOCKWISE, reset_angle=True)\n\nfront_arm = Motor(Port.D, reset_angle=True)\n\ndrive = DriveBase(left_motor=wheel_a, \n    right_motor=wheel_e, \n    wheel_diameter=constants.WHEEL_DIAMETER,\n    axle_track=constants.AXLE_LENGTH)\n\ndrive.settings(straight_speed=500)\ndrive.use_gyro(use_gyro=True)\n\n# go front before the turn\ndrive.straight(20)\n\n# \ndrive.turn(89)\n\ndrive.straight(175)\n\nfront_arm.run_target(speed=500,target_angle=-180)\n\ndrive.straight(-55)\n\ndrive.settings(turn_rate=30)\ndrive.turn(-40)\n\nfront_arm.run_target(speed=500, target_angle=180)\n\ndrive.turn(40)\ndrive.straight(-200)\n</code></pre> <pre><code>from pybricks.hubs import PrimeHub\nfrom pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor, ForceSensor\nfrom pybricks.parameters import Button, Color, Direction, Port, Side, Stop\nfrom pybricks.robotics import DriveBase\nfrom pybricks.tools import wait, StopWatch\nimport constants\n\nwheel_e = Motor(Port.E, reset_angle=True)\nwheel_a = Motor(Port.A, Direction.COUNTERCLOCKWISE, reset_angle=True)\n\n# setup the front motor which moves the arm up and down\nfront_arm = Motor(Port.D, reset_angle=True)\n\n# setup the drive base\ndrive = DriveBase(left_motor=wheel_a, \n    right_motor=wheel_e, \n    wheel_diameter=constants.WHEEL_DIAMETER,\n    axle_track=constants.AXLE_LENGTH)\n\n# set our robots speed\ndrive.settings(straight_speed=500)\n\n# use the in built gyroscope to adjust movement\n# TODO: read more about this in the documentation for robotics.DriveBase\ndrive.use_gyro(use_gyro=True)\n\n# go straight a little distance\ndrive.straight(200)\n\n# adjust heading by 20 degrees to the right\ndrive.turn(20)\n\n# go remaining distance to mission\ndrive.straight(200)\n\n# turn towards the target (target is on the left)\ndrive.turn(-65)\n\n# get closer to the target\ndrive.straight(15)\n\n# move the arm's motor to its 180 degree angle\nfront_arm.run_target(speed=500,target_angle=-180)\n\n# step back\ndrive.straight(-25)\n\n# raise the arm back to original position\nfront_arm.run_target(speed=500,target_angle=180)\n\n# turn towards home\ndrive.turn(65)\n\n# head home\ndrive.straight(-400, then=Stop.COAST)\n</code></pre> <pre><code>#Dimensions of the robot in mm\nAXLE_LENGTH = 129\nWHEEL_DIAMETER = 53\n</code></pre> </li> <li> <p>Then make sure to open <code>main.py</code> in the code area, and then hit \"(Run)\" button (or press F5 key) </p> <p></p> </li> </ol> <p>\u270f\ufe0f Run the code and interacte with the menu on the Hub to understand how it works.</p> <ul> <li>What happens when you select \"A\"?</li> <li>What happens when it finishes executing <code>mission_1.py</code>?</li> <li>What happens when you select \"C\"?</li> </ul> <p>\u270f\ufe0f Also, try hitting the \"(Run)\" button (or press F5 key) while <code>mission_1.py</code> opened in the code area.</p>"},{"location":"week_02/","title":"Week 2 - Runnign Experiments","text":"<p>Hello, young engineers! </p> <p>Today\u2019s mission: experiment with our robots to find out their full potential. </p> <p>Grab your notebooks and let\u2019s start our journey of discovery!</p>"},{"location":"week_02/#labratory-notebook","title":"Labratory Notebook","text":"<p>Great discoveries start with great notes! </p> <p>Jotting things down in your lab notebook helps you remember your awesome ideas and learn from every experiment.</p>"},{"location":"week_02/#software-experiments","title":"Software Experiments","text":"<p>Note</p> <p>The folowoing codes are tested with a robot configured like this.</p> <p> </p>"},{"location":"week_02/#gyro-on-and-off","title":"Gyro - On and Off","text":"<p>Pybricks offer <code>use_gyro()</code> function to take advantage of the hub's internal IMU to keep robot's course.</p> <p>Let's run an experiment to see the benefit of this function by running the following code.</p> <p>Tip</p> <p>The code uses <code>hub_menu()</code> function to let you enable (<code>G</code>) or disable(<code>N</code>) the gyro function.</p> <code>gyro_test.py</code><code>constants.py</code> <pre><code>from pybricks.tools import hub_menu\nfrom pybricks.hubs import PrimeHub\nfrom pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor\nfrom pybricks.parameters import Button, Color, Direction, Port, Side, Stop\nfrom pybricks.robotics import DriveBase\nfrom pybricks.tools import wait, StopWatch\nimport constants\n\nprint(\"Menu shown: G, N\")\nselected = hub_menu(\"G\", \"N\")\n\nwheel_e = Motor(Port.E, reset_angle=True)\nwheel_a = Motor(Port.A, Direction.COUNTERCLOCKWISE, reset_angle=True)\n\ndrive = DriveBase(left_motor=wheel_a, \n    right_motor=wheel_e, \n    wheel_diameter=constants.WHEEL_DIAMETER,\n    axle_track=constants.AXLE_LENGTH)\n\ndrive.settings(straight_speed=920,\n    straight_acceleration=900, \n    turn_rate=920, \n    turn_acceleration=900)\n\nif selected == \"G\":\n    drive.use_gyro(use_gyro=True)\n    print(\"### Gyro enabled\")\nelif selected == \"N\":\n    print(\"### Gyro disabled\")\n\ndrive.turn(360)\nwait(5000)          # wait 5 sec\n\nUNIT_LENGTH = 300\n\n# go NORTH\ndrive.straight(UNIT_LENGTH * 2)\ndrive.turn(90)\nprint(\"Now facing EAST\")\n\n# go EAST\ndrive.straight(UNIT_LENGTH)\ndrive.turn(90)\nprint(\"Now facing SOUTH\")\n\n# go SOUTH\ndrive.straight(UNIT_LENGTH)\ndrive.turn(90)\nprint(\"Now facing WEST\")\n\n# go WEST\ndrive.straight(UNIT_LENGTH)\ndrive.turn(90)\nprint(\"Now facing NORTH\")\n\n# go back to ORIGIN\ndrive.straight(-UNIT_LENGTH)\nprint(\"Back to (supporsedly) the original position\")\n</code></pre> <pre><code>#Dimensions of the robot in mm\nAXLE_LENGTH = 111\nWHEEL_DIAMETER = 55\n</code></pre> <p>Exercise</p> <p>Summerize your observation on your notebook.</p> \ud83d\udd14 Gyro On \ud83d\udd15 Gyro Off Your observation <p>Are there any other variables that impact the result? How about the smoothness of the floor?</p> \ud83d\udd14 Gyro On \ud83d\udd15 Gyro Off Smooth surface Rough surface"},{"location":"week_02/#sensor-feedback-ultrasonic-sensor-on-and-off","title":"Sensor feedback (Ultrasonic sensor) - On and Off","text":"<p>We have been relying on dead reckoning to have our robot navigate on the game mat.</p> <p>Let's explore alternative navigation method, this time using a feedback from the ultrasonic sensor to keep a certain distance from a side wall.</p> <p>Tip</p> <p>The code below assumes that you mount the ultrasonic distance sensor on the right hand side of the robot.</p> <p>It uses <code>hub_menu()</code> function to let you enable (<code>F</code>) or disable(<code>N</code>) the sensor feedback.</p> <code>feedback_test.py</code><code>constants.py</code> <pre><code>from pybricks.tools import hub_menu\nfrom pybricks.hubs import PrimeHub\nfrom pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor\nfrom pybricks.parameters import Button, Color, Direction, Port, Side, Stop\nfrom pybricks.robotics import DriveBase\nfrom pybricks.tools import wait, StopWatch, hub_menu\nimport constants\n\nprint(\"Menu shown: F, N\")\nselected = hub_menu(\"F\", \"N\")\n\nif selected == \"F\":\n    sensor_feedback = True\n    print(\"### Sensor feedback enabled\")\nelif selected == \"N\":\n    sensor_feedback = False\n    print(\"### Sensor feedback disabled\")\n\nwheel_e = Motor(Port.E, reset_angle=True)\nwheel_a = Motor(Port.A, Direction.COUNTERCLOCKWISE, reset_angle=True)\n\ndrive = DriveBase(left_motor=wheel_a, \n    right_motor=wheel_e, \n    wheel_diameter=constants.WHEEL_DIAMETER,\n    axle_track=constants.AXLE_LENGTH)\n\ndrive.settings(straight_speed=920,\n    straight_acceleration=900, \n    turn_rate=920, \n    turn_acceleration=900)\n\ndrive.use_gyro(use_gyro=True)\n\nrangesensor = UltrasonicSensor(port=Port.D)\n\nTARGET_DISTANCE = 200   # Try to keep 20cm away from a wall on the right\nLOW_SPEED  = 80\nHIGH_SPEED = 300\n\ncount = 0\nSPEEDUP_COUNT = 100\nEND_COUNT = 500\n\nwhile True: \n\n    distance = rangesensor.distance()\n\n    if sensor_feedback:\n        if count &lt; SPEEDUP_COUNT:\n            correction_angle = (distance - TARGET_DISTANCE)*2\n            print(f\"{count:04} ... Measured: {distance}, correction_angle: {correction_angle}\")\n            drive.drive(LOW_SPEED, correction_angle)   \n        else:\n            correction_angle = (distance - TARGET_DISTANCE)\n            print(f\"{count:04} &gt;&gt;&gt; Measured: {distance}, correction_angle: {correction_angle}\")\n            drive.drive(HIGH_SPEED, correction_angle)\n    else:\n        print(f\"{count:04} ||| Measured: {distance}\")\n        drive.drive(HIGH_SPEED, 0)\n\n    count = count + 1\n    if count &gt; END_COUNT:\n        drive.stop()\n        break\n</code></pre> <pre><code>#Dimensions of the robot in mm\nAXLE_LENGTH = 111\nWHEEL_DIAMETER = 55\n</code></pre> <p>Exercise</p> <p>Summerize your observation on your notebook.</p> Mode When aligned perfectly When alignment slightly off When alignment wildly off \ud83d\udd14 Feedback On \ud83d\udd15 Feedback Off"},{"location":"week_02/#speed-test","title":"Speed test","text":"<p>Exercise</p> <ol> <li> <p>Create a program (or modify the existing codes) to test various speed and acceleration. Record each result and examine the effect on accuracy.</p> </li> <li> <p>Repeat the same for acceleration.</p> </li> <li> <p>Record each result and summerize your observation.</p> </li> </ol> Solution <p>Tip</p> <p>By nesting the <code>hub_menu()</code> function, you can create mutliple-stage menu structure.</p> <code>gyro_test_varispeed.py</code> <pre><code>from pybricks.hubs import PrimeHub\nfrom pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor, ForceSensor\nfrom pybricks.parameters import Button, Color, Direction, Port, Side, Stop\nfrom pybricks.robotics import DriveBase\nfrom pybricks.tools import wait, StopWatch, hub_menu\nimport constants\n\nhub = PrimeHub()\n\nwheel_e = Motor(Port.E, reset_angle=True)\nwheel_a = Motor(Port.A, Direction.COUNTERCLOCKWISE, reset_angle=True)\n\ndrive = DriveBase(left_motor=wheel_a, \n    right_motor=wheel_e, \n    wheel_diameter=constants.WHEEL_DIAMETER,\n    axle_track=constants.AXLE_LENGTH)\n\nselected_speed = 1\n\nwhile True:\n    print(\"Menu shown: G, N, 1\")\n    selected = hub_menu(\"G\", \"N\", \"1\")\n\n    if selected == \"G\":\n        drive.use_gyro(use_gyro=True)\n        print(\"### Gyro enabled\")\n        break\n    elif selected == \"N\":\n        print(\"### Gyro disabled\")\n        break\n    elif selected == \"1\":\n        print(\"Menu shown: 1, 2, 3, 4, 5, 6, 7, 8, 9\")\n        selected_speed = hub_menu(1, 2, 3, 4, 5, 6, 7, 8, 9)\n\nspeed = selected_speed*100\n\ndrive.settings(straight_speed=speed,\n    straight_acceleration=900, \n    turn_rate=speed, \n    turn_acceleration=900)\n\ndrive.turn(360)\nwait(2000)          # wait 2 sec\n\nUNIT_LENGTH = 300\n\n# go NORTH\ndrive.straight(UNIT_LENGTH * 2)\ndrive.turn(90)\nprint(\"Now facing EAST\")\n\n# go EAST\ndrive.straight(UNIT_LENGTH)\ndrive.turn(90)\nprint(\"Now facing SOUTH\")\n\n# go SOUTH\ndrive.straight(UNIT_LENGTH)\ndrive.turn(90)\nprint(\"Now facing WEST\")\n\n# go WEST\ndrive.straight(UNIT_LENGTH)\ndrive.turn(90)\nprint(\"Now facing NORTH\")\n\n# go back to ORIGIN\ndrive.straight(-UNIT_LENGTH)\nprint(\"Back to (supporsedly) the original position\")\n</code></pre>"},{"location":"week_02/#bonus","title":"\ud83c\udf81 Bonus","text":"<p>Run the following code \ud83c\udfb6.</p> <p>Credit: FTC team 23247 the Monongahela Cryptid Cooperative</p> <code>melody.py</code> <pre><code>from pybricks.hubs import PrimeHub\n\nhub = PrimeHub()\n\nx0 = [\"D4/12\", \"D4/12\", \"D4/12\"]\nx1 = [\"G4/2\", \"D5/2\"]\nx2 = [\"C5/12\", \"B4/12\", \"A4/12\", \"G5/2\",  \"D5/4\"]\nx3 = [\"C5/12\", \"B4/12\", \"C5/12\", \"A4/2\",  \"D4/6\", \"D4/12\"]\nx4 = [\"E4/4.\", \"E4/8\", \"C5/8\", \"B4/8\",  \"A4/8\", \"G4/8\"]\nx5 = [\"G4/12\", \"A4/12\", \"B4/12\", \"A4/6\", \"E4/12\", \"F#4/4\", \"D4/6\", \"D4/12\"]\nx6 = [\"D5/4\", \"A4/2\", \"D4/6\", \"D4/12\"]\nx7 = [\"G4/12\", \"A4/12\", \"B4/12\", \"A4/6\", \"E4/12\", \"F#4/4\", \"D5/6\", \"D5/12\"]\nx8 = [\"G5/6\", \"F5/12\", \"Eb5/6\", \"D5/12\", \"C5/6\", \"Bb4/12\", \"A4/6\", \"G4/12\"]\nx9 = [\"D5/2.\"]\nx10 = [\"G5/12\", \"F5/12\", \"Eb5/12\", \"Bb5/2\", \"A5/4\", \"G5/8\", \"R/8\", \"G4/12\", \"G4/12\", \"G4/12\", \"G4/4\"]\ntest = x0 + x1 + x2 + x2 + x3 + x1 + x2 + x2 + x3 + x4 + x5 + x4 + x6 + x4 + x7 + x8 + x9 + x0 + x1 + x2 + x2 + x3 + x1 + x2 + x10\nhub.speaker.play_notes(test)\n</code></pre> <p>Exercise</p> <p>Had fun? Try the other programs from FTC team 23247 the Monongahela Cryptid Cooperative</p> <ul> <li>FLL-2023-old<ul> <li><code>mcc_icons_music.py</code> : You can create your own icons as well! </li> </ul> </li> </ul>"},{"location":"week_02/#hardware-experiments","title":"Hardware Experiments","text":""},{"location":"week_02/#non-linear-mechanism","title":"Non-linear mechanism","text":"<p>Homework</p>"},{"location":"week_02/#homework-for-next-session","title":"Homework for next session","text":"<ul> <li> Create GitHub account</li> </ul> <p>Warning</p> <p>Currently, it is not possible for a minor (age under 13) to create a GitHub account...</p> <p>So we need to find some way around...</p>"},{"location":"week_05/","title":"Week 5 - Multitask","text":"<p>Let's run how we can make our robot do multiple things at the same time!</p>"},{"location":"week_05/#pybrickstoolsmultitask","title":"<code>pybricks.tools.multitask</code>","text":"<p>Note</p> <p>Reference: Pybricks Documentations</p> <ul> <li>Pybricks Modules - tools <ul> <li>Multitaskinig</li> </ul> </li> </ul>"},{"location":"week_05/#example","title":"Example","text":"Port Function Note Port <code>A</code> Drive Base - Left Motor Port <code>E</code> Drive Base - Right Motor Port <code>D</code> Forklift Motor Clockwise rotation to lift up <code>forklift.py</code><code>constants.py</code> <pre><code>from pybricks.hubs import InventorHub\nfrom pybricks.pupdevices import Motor, ColorSensor, UltrasonicSensor, ForceSensor\nfrom pybricks.parameters import Button, Color, Direction, Port, Side, Stop, Axis\nfrom pybricks.robotics import DriveBase\nfrom pybricks.tools import wait, StopWatch\nfrom pybricks.tools import multitask, run_task\nimport constants\n\nhub = InventorHub(top_side=Axis.Z)\n\nlift = Motor(Port.D)\n\nwheel_e = Motor(Port.E, reset_angle=True)\nwheel_a = Motor(Port.A, Direction.COUNTERCLOCKWISE, reset_angle=True)\n\ndrive_base = DriveBase(left_motor=wheel_a, \n    right_motor=wheel_e, \n    wheel_diameter=constants.WHEEL_DIAMETER,\n    axle_track=constants.AXLE_LENGTH)\n\nSPEED = 120\n\ndrive_base.settings(straight_speed=SPEED,\n    straight_acceleration=300, \n    turn_rate=SPEED, \n    turn_acceleration=300)\n\ndrive_base.use_gyro(use_gyro=True)\n\n# Compensate lift horizontal offset\nasync def drive_back_and_up():\n    await drive_base.straight(-50)\n    await drive_base.straight(50)\n\n# Move forklift up and down while adjusting the robot position to compensate offset\nasync def move_forklift_up_and_down():\n    # await drive_base.straight(250)\n    await multitask(drive_base.straight(-50), lift.run_angle(SPEED, 70))\n    await multitask(drive_base.straight(50),  lift.run_angle(SPEED, 70))\n\n    await multitask(drive_back_and_up(), lift.run_angle(SPEED, -140))\n    # await drive_base.straight(-250)\n\n# Runs the main program from start to finish.\n\ndrive_base.settings(straight_speed=900) # Make robot move faster\ndrive_base.straight(300)\n\ndrive_base.settings(straight_speed=SPEED) # Set drivebase to low speed\nrun_task(move_forklift_up_and_down())\n\ndrive_base.settings(straight_speed=900) # Make robot move faster again\ndrive_base.straight(-300)\n</code></pre> <pre><code>#Dimensions of the robot in mm\nAXLE_LENGTH = 111\nWHEEL_DIAMETER = 55\n</code></pre> <p>Troubleshooting</p>"},{"location":"week_05/#troubleshooging","title":"Troubleshooging","text":""},{"location":"week_05/#nameerror-name-run_task-isnt-defined","title":"<code>NameError: name 'run_task' isn't defined</code>","text":"<p>Did you import <code>run_task</code> module?</p> <pre><code>from pybricks.tools import multitask, run_task\n</code></pre>"}]}